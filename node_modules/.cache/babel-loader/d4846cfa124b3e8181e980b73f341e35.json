{"ast":null,"code":"export default function clientMiddleware(client) {\n  return ({\n    dispatch,\n    getState\n  }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState);\n    }\n\n    const {\n      promise,\n      types,\n      ...rest\n    } = action;\n\n    if (!promise) {\n      return next(action);\n    }\n\n    const [REQUEST, SUCCESS, FAILURE] = types;\n    next({ ...rest,\n      type: REQUEST\n    });\n    const actionPromise = promise(client, dispatch);\n    actionPromise.then(result => next({ ...rest,\n      result,\n      type: SUCCESS\n    }), error => next({ ...rest,\n      error,\n      type: FAILURE\n    })).catch(error => {\n      next({ ...rest,\n        error,\n        type: FAILURE\n      });\n    });\n    return actionPromise;\n  };\n}","map":{"version":3,"sources":["/Users/gredu/Documents/react-marketplace/src/redux-modules/middlewares/ClientMiddleware.js"],"names":["clientMiddleware","client","dispatch","getState","next","action","promise","types","rest","REQUEST","SUCCESS","FAILURE","type","actionPromise","then","result","error","catch"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AAC7C,SAAO,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4BC,IAAI,IAAKC,MAAD,IAAY;AACnD,QAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,aAAOA,MAAM,CAACH,QAAD,EAAWC,QAAX,CAAb;AACH;;AAED,UAAM;AAAEG,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkB,SAAGC;AAArB,QAA8BH,MAApC;;AACA,QAAI,CAACC,OAAL,EAAc;AACV,aAAOF,IAAI,CAACC,MAAD,CAAX;AACH;;AAED,UAAM,CAACI,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,IAA8BJ,KAApC;AACAH,IAAAA,IAAI,CAAC,EAAE,GAAGI,IAAL;AAAWI,MAAAA,IAAI,EAAEH;AAAjB,KAAD,CAAJ;AAEA,UAAMI,aAAa,GAAGP,OAAO,CAACL,MAAD,EAASC,QAAT,CAA7B;AACAW,IAAAA,aAAa,CAACC,IAAd,CACIC,MAAM,IAAIX,IAAI,CAAC,EAAE,GAAGI,IAAL;AAAWO,MAAAA,MAAX;AAAmBH,MAAAA,IAAI,EAAEF;AAAzB,KAAD,CADlB,EAEIM,KAAK,IAAIZ,IAAI,CAAC,EAAE,GAAGI,IAAL;AAAWQ,MAAAA,KAAX;AAAkBJ,MAAAA,IAAI,EAAED;AAAxB,KAAD,CAFjB,EAGEM,KAHF,CAGSD,KAAD,IAAW;AACfZ,MAAAA,IAAI,CAAC,EAAE,GAAGI,IAAL;AAAWQ,QAAAA,KAAX;AAAkBJ,QAAAA,IAAI,EAAED;AAAxB,OAAD,CAAJ;AACH,KALD;AAOA,WAAOE,aAAP;AACH,GAtBD;AAuBH","sourcesContent":["export default function clientMiddleware(client) {\n    return ({ dispatch, getState }) => next => (action) => {\n        if (typeof action === 'function') {\n            return action(dispatch, getState);\n        }\n\n        const { promise, types, ...rest } = action;\n        if (!promise) {\n            return next(action);\n        }\n\n        const [REQUEST, SUCCESS, FAILURE] = types;\n        next({ ...rest, type: REQUEST });\n\n        const actionPromise = promise(client, dispatch);\n        actionPromise.then(\n            result => next({ ...rest, result, type: SUCCESS }),\n            error => next({ ...rest, error, type: FAILURE }),\n        ).catch((error) => {\n            next({ ...rest, error, type: FAILURE });\n        });\n\n        return actionPromise;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}